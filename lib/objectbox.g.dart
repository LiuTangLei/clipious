// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'downloads/models/downloaded_video.dart';
import 'home/models/db/home_layout.dart';
import 'notifications/models/db/channel_notifications.dart';
import 'notifications/models/db/playlist_notifications.dart';
import 'notifications/models/db/subscription_notifications.dart';
import 'search/models/db/search_history_item.dart';
import 'settings/models/db/app_logs.dart';
import 'settings/models/db/server.dart';
import 'settings/models/db/settings.dart';
import 'settings/models/db/video_filter.dart';
import 'videos/models/db/dearrow_cache.dart';
import 'videos/models/db/history_video_cache.dart';
import 'videos/models/db/progress.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8038281984607819042),
      name: 'Server',
      lastPropertyId: const IdUid(8, 6323276442216762344),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2410037502505490239),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8956955780928852647),
            name: 'url',
            type: 9,
            flags: 34848,
            indexId: const IdUid(1, 2407620149040502806)),
        ModelProperty(
            id: const IdUid(3, 2983333445278944481),
            name: 'authToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2632576147281157993),
            name: 'inUse',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7993511472188126727),
            name: 'sidCookie',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 6956330633348216454),
      name: 'SearchHistoryItem',
      lastPropertyId: const IdUid(4, 2889158211381180137),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5055652677379509965),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1184322842379216559),
            name: 'search',
            type: 9,
            flags: 34848,
            indexId: const IdUid(5, 7262786699272501249)),
        ModelProperty(
            id: const IdUid(3, 4799661758354837094),
            name: 'time',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 8304874620604193998),
      name: 'VideoFilter',
      lastPropertyId: const IdUid(13, 8945583272502028280),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4718003498405944371),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 906689741192359458),
            name: 'channelId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 19321448094437321),
            name: 'value',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7050038042672519102),
            name: 'dbType',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2812361632619055204),
            name: 'dbOperation',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4560530621575797576),
            name: 'filterAll',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6020474727686624632),
            name: 'hideFromFeed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 385259419700560741),
            name: 'daysOfWeek',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4391992064156904605),
            name: 'startTime',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8416925878752879022),
            name: 'endTime',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 7737259498144569754),
      name: 'DownloadedVideo',
      lastPropertyId: const IdUid(12, 5585556588689024155),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4941717954477256691),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 2383320059961158921),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8378509179540529921),
            name: 'author',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1179720564271059922),
            name: 'authorUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 107924486215845740),
            name: 'downloadComplete',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4130320220878296738),
            name: 'downloadFailed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6560523765053270041),
            name: 'audioOnly',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7860866333154890990),
            name: 'quality',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4090966965717168930),
            name: 'lengthSeconds',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5585556588689024155),
            name: 'videoId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 4192516430920036128),
      name: 'HistoryVideoCache',
      lastPropertyId: const IdUid(7, 8421329419907109451),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2955960989783551283),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4777842522603948496),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4486601293052981453),
            name: 'author',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5980827452700393174),
            name: 'videoId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5075309708561338655),
            name: 'created',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3954053412124926577),
            name: 'thumbnail',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 6821162325360407377),
      name: 'HomeLayout',
      lastPropertyId: const IdUid(5, 4674521545903994841),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2141116138730176870),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4699190633584236247),
            name: 'showBigSource',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2336366876714802775),
            name: 'dbBigSource',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8172441605240321034),
            name: 'dbSmallSources',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 3657792956132207980),
      name: 'SubscriptionNotification',
      lastPropertyId: const IdUid(4, 5768606046399747454),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2430225471686599517),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2835271477274198093),
            name: 'lastSeenVideoId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1941341505549292694),
            name: 'timestamp',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 2070539588161609146),
      name: 'ChannelNotification',
      lastPropertyId: const IdUid(6, 7200202428280370280),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8845605462686818448),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2512902621149037266),
            name: 'channelId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(6, 1543728882665646543)),
        ModelProperty(
            id: const IdUid(3, 1308895344490646098),
            name: 'lastSeenVideoId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4272759280615528314),
            name: 'timestamp',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2886321232475223602),
            name: 'channelName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 8331886434292283747),
      name: 'PlaylistNotification',
      lastPropertyId: const IdUid(6, 6814419739956669774),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7681992295553062859),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8328838064368170718),
            name: 'playlistId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(7, 4488140487903335246)),
        ModelProperty(
            id: const IdUid(3, 7229926964587744944),
            name: 'lastVideoCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6825540046607174830),
            name: 'timestamp',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5316267761398216511),
            name: 'playlistName',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(15, 7475761865024216578),
      name: 'DeArrowCache',
      lastPropertyId: const IdUid(5, 6630473468372739852),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2266267358862097191),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6260864673962012294),
            name: 'videoId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(8, 11015011236117301)),
        ModelProperty(
            id: const IdUid(3, 3037776482306894529),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7876161971726247302),
            name: 'url',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(16, 2944776928237380894),
      name: 'Progress',
      lastPropertyId: const IdUid(3, 7757030744687416674),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6993927468027465678),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7781790784557399507),
            name: 'progress',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7757030744687416674),
            name: 'videoId',
            type: 9,
            flags: 34848,
            indexId: const IdUid(9, 8960692962072533961))
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(17, 3226584388645747274),
      name: 'SettingsValue',
      lastPropertyId: const IdUid(3, 5202713357902054257),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7518270370862442040),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6486301525226034425),
            name: 'name',
            type: 9,
            flags: 34848,
            indexId: const IdUid(10, 4781107858872222149)),
        ModelProperty(
            id: const IdUid(3, 5202713357902054257),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(18, 4069086592757929623),
      name: 'AppLog',
      lastPropertyId: const IdUid(6, 1541601625289884147),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3023976684815144395),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6125955234963688745),
            name: 'level',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3016302001846420227),
            name: 'logger',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2011399553225396008),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 85092820905438473),
            name: 'stacktrace',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1541601625289884147),
            name: 'message',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(18, 4069086592757929623),
      lastIndexId: const IdUid(10, 4781107858872222149),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        6897417709810972885,
        2895109148053406327,
        2463187106197509769,
        8787382286414233697,
        8446250266008376981
      ],
      retiredIndexUids: const [9110274326691932798],
      retiredPropertyUids: const [
        3422621380867834787,
        971220157301355316,
        7030952573865954657,
        6600296338817128660,
        345286493546760360,
        3278768646220204892,
        6911432365687480646,
        2516863991952055225,
        7200202428280370280,
        6630473468372739852,
        8421329419907109451,
        4674521545903994841,
        6814419739956669774,
        2850523087664236792,
        2889158211381180137,
        6323276442216762344,
        4456133405276724782,
        5768606046399747454,
        9166993721458673597,
        3567602159840796895,
        525293931186831855,
        4665740245375834282,
        5651818511313053101,
        4301486387527660152,
        8602536477328513343,
        3160197863614923332,
        3008237629246315185,
        2647517759142178088,
        7759611646931835814,
        1230803493579490035,
        5023716219165786985,
        8945583272502028280
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Server: EntityDefinition<Server>(
        model: _entities[0],
        toOneRelations: (Server object) => [],
        toManyRelations: (Server object) => {},
        getId: (Server object) => object.id,
        setId: (Server object, int id) {
          object.id = id;
        },
        objectToFB: (Server object, fb.Builder fbb) {
          final urlOffset = fbb.writeString(object.url);
          final authTokenOffset = object.authToken == null
              ? null
              : fbb.writeString(object.authToken!);
          final sidCookieOffset = object.sidCookie == null
              ? null
              : fbb.writeString(object.sidCookie!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, urlOffset);
          fbb.addOffset(2, authTokenOffset);
          fbb.addBool(5, object.inUse);
          fbb.addOffset(6, sidCookieOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final urlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final authTokenParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final sidCookieParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final inUseParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final object = Server(
              url: urlParam,
              authToken: authTokenParam,
              sidCookie: sidCookieParam,
              inUse: inUseParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SearchHistoryItem: EntityDefinition<SearchHistoryItem>(
        model: _entities[1],
        toOneRelations: (SearchHistoryItem object) => [],
        toManyRelations: (SearchHistoryItem object) => {},
        getId: (SearchHistoryItem object) => object.id,
        setId: (SearchHistoryItem object, int id) {
          object.id = id;
        },
        objectToFB: (SearchHistoryItem object, fb.Builder fbb) {
          final searchOffset = fbb.writeString(object.search);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, searchOffset);
          fbb.addInt64(2, object.time);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final searchParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final timeParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = SearchHistoryItem(searchParam, timeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    VideoFilter: EntityDefinition<VideoFilter>(
        model: _entities[2],
        toOneRelations: (VideoFilter object) => [],
        toManyRelations: (VideoFilter object) => {},
        getId: (VideoFilter object) => object.id,
        setId: (VideoFilter object, int id) {
          object.id = id;
        },
        objectToFB: (VideoFilter object, fb.Builder fbb) {
          final channelIdOffset = object.channelId == null
              ? null
              : fbb.writeString(object.channelId!);
          final valueOffset =
              object.value == null ? null : fbb.writeString(object.value!);
          final dbTypeOffset =
              object.dbType == null ? null : fbb.writeString(object.dbType!);
          final dbOperationOffset = object.dbOperation == null
              ? null
              : fbb.writeString(object.dbOperation!);
          final daysOfWeekOffset = fbb.writeListInt64(object.daysOfWeek);
          final startTimeOffset = fbb.writeString(object.startTime);
          final endTimeOffset = fbb.writeString(object.endTime);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, channelIdOffset);
          fbb.addOffset(2, valueOffset);
          fbb.addOffset(3, dbTypeOffset);
          fbb.addOffset(4, dbOperationOffset);
          fbb.addBool(6, object.filterAll);
          fbb.addBool(7, object.hideFromFeed);
          fbb.addOffset(8, daysOfWeekOffset);
          fbb.addOffset(9, startTimeOffset);
          fbb.addOffset(10, endTimeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final channelIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final object = VideoFilter(
              value: valueParam, channelId: channelIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbType = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10)
            ..dbOperation = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 12)
            ..filterAll =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false)
            ..hideFromFeed =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false)
            ..daysOfWeek =
                const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                    .vTableGet(buffer, rootOffset, 20, [])
            ..startTime = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 22, '')
            ..endTime = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 24, '');

          return object;
        }),
    DownloadedVideo: EntityDefinition<DownloadedVideo>(
        model: _entities[3],
        toOneRelations: (DownloadedVideo object) => [],
        toManyRelations: (DownloadedVideo object) => {},
        getId: (DownloadedVideo object) => object.id,
        setId: (DownloadedVideo object, int id) {
          object.id = id;
        },
        objectToFB: (DownloadedVideo object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final authorOffset =
              object.author == null ? null : fbb.writeString(object.author!);
          final authorUrlOffset = object.authorUrl == null
              ? null
              : fbb.writeString(object.authorUrl!);
          final qualityOffset = fbb.writeString(object.quality);
          final videoIdOffset = fbb.writeString(object.videoId);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, authorOffset);
          fbb.addOffset(4, authorUrlOffset);
          fbb.addBool(5, object.downloadComplete);
          fbb.addBool(6, object.downloadFailed);
          fbb.addBool(7, object.audioOnly);
          fbb.addOffset(9, qualityOffset);
          fbb.addInt64(10, object.lengthSeconds);
          fbb.addOffset(11, videoIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final videoIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 26, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final authorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final authorUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final downloadCompleteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final downloadFailedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final audioOnlyParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final lengthSecondsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final qualityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final object = DownloadedVideo(
              id: idParam,
              videoId: videoIdParam,
              title: titleParam,
              author: authorParam,
              authorUrl: authorUrlParam,
              downloadComplete: downloadCompleteParam,
              downloadFailed: downloadFailedParam,
              audioOnly: audioOnlyParam,
              lengthSeconds: lengthSecondsParam,
              quality: qualityParam);

          return object;
        }),
    HistoryVideoCache: EntityDefinition<HistoryVideoCache>(
        model: _entities[4],
        toOneRelations: (HistoryVideoCache object) => [],
        toManyRelations: (HistoryVideoCache object) => {},
        getId: (HistoryVideoCache object) => object.id,
        setId: (HistoryVideoCache object, int id) {
          object.id = id;
        },
        objectToFB: (HistoryVideoCache object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final authorOffset =
              object.author == null ? null : fbb.writeString(object.author!);
          final videoIdOffset = fbb.writeString(object.videoId);
          final thumbnailOffset = fbb.writeString(object.thumbnail);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, authorOffset);
          fbb.addOffset(3, videoIdOffset);
          fbb.addInt64(4, object.created.millisecondsSinceEpoch);
          fbb.addOffset(5, thumbnailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final videoIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final authorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final thumbnailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final object = HistoryVideoCache(
              videoIdParam, titleParam, authorParam, thumbnailParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..created = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    HomeLayout: EntityDefinition<HomeLayout>(
        model: _entities[5],
        toOneRelations: (HomeLayout object) => [],
        toManyRelations: (HomeLayout object) => {},
        getId: (HomeLayout object) => object.id,
        setId: (HomeLayout object, int id) {
          object.id = id;
        },
        objectToFB: (HomeLayout object, fb.Builder fbb) {
          final dbBigSourceOffset = fbb.writeString(object.dbBigSource);
          final dbSmallSourcesOffset = fbb.writeList(object.dbSmallSources
              .map(fbb.writeString)
              .toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.showBigSource);
          fbb.addOffset(2, dbBigSourceOffset);
          fbb.addOffset(3, dbSmallSourcesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = HomeLayout()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..showBigSource =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false)
            ..dbBigSource = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..dbSmallSources = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 10, []);

          return object;
        }),
    SubscriptionNotification: EntityDefinition<SubscriptionNotification>(
        model: _entities[6],
        toOneRelations: (SubscriptionNotification object) => [],
        toManyRelations: (SubscriptionNotification object) => {},
        getId: (SubscriptionNotification object) => object.id,
        setId: (SubscriptionNotification object, int id) {
          object.id = id;
        },
        objectToFB: (SubscriptionNotification object, fb.Builder fbb) {
          final lastSeenVideoIdOffset = fbb.writeString(object.lastSeenVideoId);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, lastSeenVideoIdOffset);
          fbb.addInt64(2, object.timestamp);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastSeenVideoIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = SubscriptionNotification(
              lastSeenVideoIdParam, timestampParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ChannelNotification: EntityDefinition<ChannelNotification>(
        model: _entities[7],
        toOneRelations: (ChannelNotification object) => [],
        toManyRelations: (ChannelNotification object) => {},
        getId: (ChannelNotification object) => object.id,
        setId: (ChannelNotification object, int id) {
          object.id = id;
        },
        objectToFB: (ChannelNotification object, fb.Builder fbb) {
          final channelIdOffset = fbb.writeString(object.channelId);
          final lastSeenVideoIdOffset = fbb.writeString(object.lastSeenVideoId);
          final channelNameOffset = fbb.writeString(object.channelName);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, channelIdOffset);
          fbb.addOffset(2, lastSeenVideoIdOffset);
          fbb.addInt64(3, object.timestamp);
          fbb.addOffset(4, channelNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final channelIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final channelNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final lastSeenVideoIdParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final object = ChannelNotification(channelIdParam, channelNameParam,
              lastSeenVideoIdParam, timestampParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PlaylistNotification: EntityDefinition<PlaylistNotification>(
        model: _entities[8],
        toOneRelations: (PlaylistNotification object) => [],
        toManyRelations: (PlaylistNotification object) => {},
        getId: (PlaylistNotification object) => object.id,
        setId: (PlaylistNotification object, int id) {
          object.id = id;
        },
        objectToFB: (PlaylistNotification object, fb.Builder fbb) {
          final playlistIdOffset = fbb.writeString(object.playlistId);
          final playlistNameOffset = fbb.writeString(object.playlistName);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, playlistIdOffset);
          fbb.addInt64(2, object.lastVideoCount);
          fbb.addInt64(3, object.timestamp);
          fbb.addOffset(4, playlistNameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final playlistIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final lastVideoCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final timestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final playlistNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = PlaylistNotification(playlistIdParam,
              lastVideoCountParam, timestampParam, playlistNameParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    DeArrowCache: EntityDefinition<DeArrowCache>(
        model: _entities[9],
        toOneRelations: (DeArrowCache object) => [],
        toManyRelations: (DeArrowCache object) => {},
        getId: (DeArrowCache object) => object.id,
        setId: (DeArrowCache object, int id) {
          object.id = id;
        },
        objectToFB: (DeArrowCache object, fb.Builder fbb) {
          final videoIdOffset = fbb.writeString(object.videoId);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final urlOffset =
              object.url == null ? null : fbb.writeString(object.url!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, videoIdOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, urlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final videoIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final object = DeArrowCache(videoIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..url = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 10);

          return object;
        }),
    Progress: EntityDefinition<Progress>(
        model: _entities[10],
        toOneRelations: (Progress object) => [],
        toManyRelations: (Progress object) => {},
        getId: (Progress object) => object.id,
        setId: (Progress object, int id) {
          object.id = id;
        },
        objectToFB: (Progress object, fb.Builder fbb) {
          final videoIdOffset = fbb.writeString(object.videoId);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.progress);
          fbb.addOffset(2, videoIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final progressParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final videoIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = Progress(progressParam, videoIdParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    SettingsValue: EntityDefinition<SettingsValue>(
        model: _entities[11],
        toOneRelations: (SettingsValue object) => [],
        toManyRelations: (SettingsValue object) => {},
        getId: (SettingsValue object) => object.id,
        setId: (SettingsValue object, int id) {
          object.id = id;
        },
        objectToFB: (SettingsValue object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = SettingsValue(nameParam, valueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    AppLog: EntityDefinition<AppLog>(
        model: _entities[12],
        toOneRelations: (AppLog object) => [],
        toManyRelations: (AppLog object) => {},
        getId: (AppLog object) => object.id,
        setId: (AppLog object, int id) {
          object.id = id;
        },
        objectToFB: (AppLog object, fb.Builder fbb) {
          final levelOffset = fbb.writeString(object.level);
          final loggerOffset = fbb.writeString(object.logger);
          final stacktraceOffset = object.stacktrace == null
              ? null
              : fbb.writeString(object.stacktrace!);
          final messageOffset =
              object.message == null ? null : fbb.writeString(object.message!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, levelOffset);
          fbb.addOffset(2, loggerOffset);
          fbb.addInt64(3, object.time.millisecondsSinceEpoch);
          fbb.addOffset(4, stacktraceOffset);
          fbb.addOffset(5, messageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final levelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final loggerParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final timeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final messageParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final stacktraceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final object = AppLog(
              level: levelParam,
              logger: loggerParam,
              time: timeParam,
              message: messageParam,
              stacktrace: stacktraceParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Server] entity fields to define ObjectBox queries.
class Server_ {
  /// see [Server.id]
  static final id = QueryIntegerProperty<Server>(_entities[0].properties[0]);

  /// see [Server.url]
  static final url = QueryStringProperty<Server>(_entities[0].properties[1]);

  /// see [Server.authToken]
  static final authToken =
      QueryStringProperty<Server>(_entities[0].properties[2]);

  /// see [Server.inUse]
  static final inUse = QueryBooleanProperty<Server>(_entities[0].properties[3]);

  /// see [Server.sidCookie]
  static final sidCookie =
      QueryStringProperty<Server>(_entities[0].properties[4]);
}

/// [SearchHistoryItem] entity fields to define ObjectBox queries.
class SearchHistoryItem_ {
  /// see [SearchHistoryItem.id]
  static final id =
      QueryIntegerProperty<SearchHistoryItem>(_entities[1].properties[0]);

  /// see [SearchHistoryItem.search]
  static final search =
      QueryStringProperty<SearchHistoryItem>(_entities[1].properties[1]);

  /// see [SearchHistoryItem.time]
  static final time =
      QueryIntegerProperty<SearchHistoryItem>(_entities[1].properties[2]);
}

/// [VideoFilter] entity fields to define ObjectBox queries.
class VideoFilter_ {
  /// see [VideoFilter.id]
  static final id =
      QueryIntegerProperty<VideoFilter>(_entities[2].properties[0]);

  /// see [VideoFilter.channelId]
  static final channelId =
      QueryStringProperty<VideoFilter>(_entities[2].properties[1]);

  /// see [VideoFilter.value]
  static final value =
      QueryStringProperty<VideoFilter>(_entities[2].properties[2]);

  /// see [VideoFilter.dbType]
  static final dbType =
      QueryStringProperty<VideoFilter>(_entities[2].properties[3]);

  /// see [VideoFilter.dbOperation]
  static final dbOperation =
      QueryStringProperty<VideoFilter>(_entities[2].properties[4]);

  /// see [VideoFilter.filterAll]
  static final filterAll =
      QueryBooleanProperty<VideoFilter>(_entities[2].properties[5]);

  /// see [VideoFilter.hideFromFeed]
  static final hideFromFeed =
      QueryBooleanProperty<VideoFilter>(_entities[2].properties[6]);

  /// see [VideoFilter.daysOfWeek]
  static final daysOfWeek =
      QueryIntegerVectorProperty<VideoFilter>(_entities[2].properties[7]);

  /// see [VideoFilter.startTime]
  static final startTime =
      QueryStringProperty<VideoFilter>(_entities[2].properties[8]);

  /// see [VideoFilter.endTime]
  static final endTime =
      QueryStringProperty<VideoFilter>(_entities[2].properties[9]);
}

/// [DownloadedVideo] entity fields to define ObjectBox queries.
class DownloadedVideo_ {
  /// see [DownloadedVideo.id]
  static final id =
      QueryIntegerProperty<DownloadedVideo>(_entities[3].properties[0]);

  /// see [DownloadedVideo.title]
  static final title =
      QueryStringProperty<DownloadedVideo>(_entities[3].properties[1]);

  /// see [DownloadedVideo.author]
  static final author =
      QueryStringProperty<DownloadedVideo>(_entities[3].properties[2]);

  /// see [DownloadedVideo.authorUrl]
  static final authorUrl =
      QueryStringProperty<DownloadedVideo>(_entities[3].properties[3]);

  /// see [DownloadedVideo.downloadComplete]
  static final downloadComplete =
      QueryBooleanProperty<DownloadedVideo>(_entities[3].properties[4]);

  /// see [DownloadedVideo.downloadFailed]
  static final downloadFailed =
      QueryBooleanProperty<DownloadedVideo>(_entities[3].properties[5]);

  /// see [DownloadedVideo.audioOnly]
  static final audioOnly =
      QueryBooleanProperty<DownloadedVideo>(_entities[3].properties[6]);

  /// see [DownloadedVideo.quality]
  static final quality =
      QueryStringProperty<DownloadedVideo>(_entities[3].properties[7]);

  /// see [DownloadedVideo.lengthSeconds]
  static final lengthSeconds =
      QueryIntegerProperty<DownloadedVideo>(_entities[3].properties[8]);

  /// see [DownloadedVideo.videoId]
  static final videoId =
      QueryStringProperty<DownloadedVideo>(_entities[3].properties[9]);
}

/// [HistoryVideoCache] entity fields to define ObjectBox queries.
class HistoryVideoCache_ {
  /// see [HistoryVideoCache.id]
  static final id =
      QueryIntegerProperty<HistoryVideoCache>(_entities[4].properties[0]);

  /// see [HistoryVideoCache.title]
  static final title =
      QueryStringProperty<HistoryVideoCache>(_entities[4].properties[1]);

  /// see [HistoryVideoCache.author]
  static final author =
      QueryStringProperty<HistoryVideoCache>(_entities[4].properties[2]);

  /// see [HistoryVideoCache.videoId]
  static final videoId =
      QueryStringProperty<HistoryVideoCache>(_entities[4].properties[3]);

  /// see [HistoryVideoCache.created]
  static final created =
      QueryIntegerProperty<HistoryVideoCache>(_entities[4].properties[4]);

  /// see [HistoryVideoCache.thumbnail]
  static final thumbnail =
      QueryStringProperty<HistoryVideoCache>(_entities[4].properties[5]);
}

/// [HomeLayout] entity fields to define ObjectBox queries.
class HomeLayout_ {
  /// see [HomeLayout.id]
  static final id =
      QueryIntegerProperty<HomeLayout>(_entities[5].properties[0]);

  /// see [HomeLayout.showBigSource]
  static final showBigSource =
      QueryBooleanProperty<HomeLayout>(_entities[5].properties[1]);

  /// see [HomeLayout.dbBigSource]
  static final dbBigSource =
      QueryStringProperty<HomeLayout>(_entities[5].properties[2]);

  /// see [HomeLayout.dbSmallSources]
  static final dbSmallSources =
      QueryStringVectorProperty<HomeLayout>(_entities[5].properties[3]);
}

/// [SubscriptionNotification] entity fields to define ObjectBox queries.
class SubscriptionNotification_ {
  /// see [SubscriptionNotification.id]
  static final id = QueryIntegerProperty<SubscriptionNotification>(
      _entities[6].properties[0]);

  /// see [SubscriptionNotification.lastSeenVideoId]
  static final lastSeenVideoId =
      QueryStringProperty<SubscriptionNotification>(_entities[6].properties[1]);

  /// see [SubscriptionNotification.timestamp]
  static final timestamp = QueryIntegerProperty<SubscriptionNotification>(
      _entities[6].properties[2]);
}

/// [ChannelNotification] entity fields to define ObjectBox queries.
class ChannelNotification_ {
  /// see [ChannelNotification.id]
  static final id =
      QueryIntegerProperty<ChannelNotification>(_entities[7].properties[0]);

  /// see [ChannelNotification.channelId]
  static final channelId =
      QueryStringProperty<ChannelNotification>(_entities[7].properties[1]);

  /// see [ChannelNotification.lastSeenVideoId]
  static final lastSeenVideoId =
      QueryStringProperty<ChannelNotification>(_entities[7].properties[2]);

  /// see [ChannelNotification.timestamp]
  static final timestamp =
      QueryIntegerProperty<ChannelNotification>(_entities[7].properties[3]);

  /// see [ChannelNotification.channelName]
  static final channelName =
      QueryStringProperty<ChannelNotification>(_entities[7].properties[4]);
}

/// [PlaylistNotification] entity fields to define ObjectBox queries.
class PlaylistNotification_ {
  /// see [PlaylistNotification.id]
  static final id =
      QueryIntegerProperty<PlaylistNotification>(_entities[8].properties[0]);

  /// see [PlaylistNotification.playlistId]
  static final playlistId =
      QueryStringProperty<PlaylistNotification>(_entities[8].properties[1]);

  /// see [PlaylistNotification.lastVideoCount]
  static final lastVideoCount =
      QueryIntegerProperty<PlaylistNotification>(_entities[8].properties[2]);

  /// see [PlaylistNotification.timestamp]
  static final timestamp =
      QueryIntegerProperty<PlaylistNotification>(_entities[8].properties[3]);

  /// see [PlaylistNotification.playlistName]
  static final playlistName =
      QueryStringProperty<PlaylistNotification>(_entities[8].properties[4]);
}

/// [DeArrowCache] entity fields to define ObjectBox queries.
class DeArrowCache_ {
  /// see [DeArrowCache.id]
  static final id =
      QueryIntegerProperty<DeArrowCache>(_entities[9].properties[0]);

  /// see [DeArrowCache.videoId]
  static final videoId =
      QueryStringProperty<DeArrowCache>(_entities[9].properties[1]);

  /// see [DeArrowCache.title]
  static final title =
      QueryStringProperty<DeArrowCache>(_entities[9].properties[2]);

  /// see [DeArrowCache.url]
  static final url =
      QueryStringProperty<DeArrowCache>(_entities[9].properties[3]);
}

/// [Progress] entity fields to define ObjectBox queries.
class Progress_ {
  /// see [Progress.id]
  static final id = QueryIntegerProperty<Progress>(_entities[10].properties[0]);

  /// see [Progress.progress]
  static final progress =
      QueryDoubleProperty<Progress>(_entities[10].properties[1]);

  /// see [Progress.videoId]
  static final videoId =
      QueryStringProperty<Progress>(_entities[10].properties[2]);
}

/// [SettingsValue] entity fields to define ObjectBox queries.
class SettingsValue_ {
  /// see [SettingsValue.id]
  static final id =
      QueryIntegerProperty<SettingsValue>(_entities[11].properties[0]);

  /// see [SettingsValue.name]
  static final name =
      QueryStringProperty<SettingsValue>(_entities[11].properties[1]);

  /// see [SettingsValue.value]
  static final value =
      QueryStringProperty<SettingsValue>(_entities[11].properties[2]);
}

/// [AppLog] entity fields to define ObjectBox queries.
class AppLog_ {
  /// see [AppLog.id]
  static final id = QueryIntegerProperty<AppLog>(_entities[12].properties[0]);

  /// see [AppLog.level]
  static final level = QueryStringProperty<AppLog>(_entities[12].properties[1]);

  /// see [AppLog.logger]
  static final logger =
      QueryStringProperty<AppLog>(_entities[12].properties[2]);

  /// see [AppLog.time]
  static final time = QueryIntegerProperty<AppLog>(_entities[12].properties[3]);

  /// see [AppLog.stacktrace]
  static final stacktrace =
      QueryStringProperty<AppLog>(_entities[12].properties[4]);

  /// see [AppLog.message]
  static final message =
      QueryStringProperty<AppLog>(_entities[12].properties[5]);
}
